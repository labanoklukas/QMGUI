{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\billi\\\\Main\\\\GitRepositories\\\\QMGUI\\\\src\\\\Snow\\\\Snow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Snow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api_key = \"037801e525acc86cf8c189da8468446e\";\nconst Snow = () => {\n  _s();\n  const [forecastData, setForecastData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchForecastData = async () => {\n      const lat = 'YOUR_LATITUDE'; // Set latitude of the location\n      const lon = 'YOUR_LONGITUDE'; // Set longitude of the location\n      const cnt = 5; // Number of forecast data points to retrieve\n\n      const Forecast_URL = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&cnt=${cnt}&appid=${api_key}`;\n      try {\n        const response = await fetch(Forecast_URL);\n        const data = await response.json();\n        setForecastData(data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        setLoading(false);\n      }\n    };\n    fetchForecastData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Forecast Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(Snow, \"m3w9swgL2HevcieK9KkC9E7JEb8=\");\n_c = Snow;\nexport default Snow;\nvar _c;\n$RefreshReg$(_c, \"Snow\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","api_key","Snow","_s","forecastData","setForecastData","loading","setLoading","error","setError","fetchForecastData","lat","lon","cnt","Forecast_URL","response","fetch","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","message","className","_c","$RefreshReg$"],"sources":["C:/Users/billi/Main/GitRepositories/QMGUI/src/Snow/Snow.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Snow.css';\r\n\r\nconst api_key = \"037801e525acc86cf8c189da8468446e\";\r\n\r\nconst Snow = () => {\r\n    const [forecastData, setForecastData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchForecastData = async () => {\r\n            const lat = 'YOUR_LATITUDE'; // Set latitude of the location\r\n            const lon = 'YOUR_LONGITUDE'; // Set longitude of the location\r\n            const cnt = 5; // Number of forecast data points to retrieve\r\n\r\n            const Forecast_URL = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&cnt=${cnt}&appid=${api_key}`;\r\n\r\n            try {\r\n                const response = await fetch(Forecast_URL);\r\n                const data = await response.json();\r\n                setForecastData(data);\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchForecastData();\r\n    }, []);\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n    if (error) return <div>Error: {error.message}</div>;\r\n\r\n    return (\r\n        <div className='container'>\r\n            {/* Render forecast data here */}\r\n            <h1>Forecast Data</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Snow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,OAAO,GAAG,kCAAkC;AAElD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZ,MAAMa,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMC,GAAG,GAAG,eAAe,CAAC,CAAC;MAC7B,MAAMC,GAAG,GAAG,gBAAgB,CAAC,CAAC;MAC9B,MAAMC,GAAG,GAAG,CAAC,CAAC,CAAC;;MAEf,MAAMC,YAAY,GAAI,wDAAuDH,GAAI,QAAOC,GAAI,QAAOC,GAAI,UAASZ,OAAQ,EAAC;MAEzH,IAAI;QACA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACF,YAAY,CAAC;QAC1C,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCb,eAAe,CAACY,IAAI,CAAC;QACrBV,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,QAAQ,CAACD,KAAK,CAAC;QACfD,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE,oBAAON,OAAA;IAAAmB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACzC,IAAIf,KAAK,EAAE,oBAAOR,OAAA;IAAAmB,QAAA,GAAK,SAAO,EAACX,KAAK,CAACgB,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAEnD,oBACIvB,OAAA;IAAKyB,SAAS,EAAC,WAAW;IAAAN,QAAA,eAEtBnB,OAAA;MAAAmB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEd,CAAC;AAACpB,EAAA,CApCID,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAsCV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}